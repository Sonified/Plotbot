# plotbot/print_manager.pyi
# Stub file for type hinting

import inspect
import datetime
import os
import logging
from typing import Any, Dict, List, Optional

class PyspedasInfoFilter(logging.Filter):
    """Filters out common, verbose INFO messages from pyspedas."""
    def filter(self, record: logging.LogRecord) -> bool: ...

class print_manager_class:
    """
    Print manager class for consistent formatted output.
    See .py file for full docstring.
    """
    debug_mode: bool
    custom_debug_enabled: bool
    variable_testing_enabled: bool
    variable_basic_enabled: bool
    error_enabled: bool
    time_tracking_enabled: bool
    test_enabled: bool
    module_prefix_enabled: bool
    processing_enabled: bool
    category_prefix_enabled: bool
    warnings_enabled: bool
    _pyspedas_verbose: bool
    pyspedas_filter_instance: Optional[PyspedasInfoFilter]
    show_datacubby: bool # For backward compatibility
    show_data_snapshot: bool

    # Prefixes
    debug_prefix: str
    custom_debug_prefix: str
    variable_testing_prefix: str
    variable_basic_prefix: str
    error_prefix: str
    time_tracking_prefix: str
    test_prefix: str
    processing_prefix: str

    # Levels
    level_critical: str
    level_warning: str
    level_info: str
    level_trace: str

    # Components
    _component_markers: Dict[str, str]

    def __init__(self) -> None: ...
    def _configure_pyspedas_logging(self) -> None: ...
    def _format_message(self, msg: str, component: Optional[str] = None) -> str: ...
    def debug(self, msg: str) -> None: ...
    def error(self, msg: str) -> None: ...
    def warning(self, msg: str) -> None: ...
    def custom_debug(self, msg: str) -> None: ...
    def variable_testing(self, msg: str) -> None: ...
    def variable_basic(self, msg: str) -> None: ...
    def math(self, msg: str, level: str = "info") -> None: ...
    def data(self, msg: str, level: str = "info") -> None: ...
    def plot(self, msg: str, level: str = "info") -> None: ...
    def recalc(self, msg: str, level: str = "info") -> None: ...
    def import_log(self, msg: str, level: str = "info") -> None: ...
    def zarr_integration(self, msg: str) -> None: ...
    def time_tracking(self, msg: str) -> None: ...
    def time_input(self, function_name: str, trange: Any) -> None: ...
    def time_output(self, function_name: str, trange: Any) -> None: ...
    def time_transform(self, function_name: str, input_trange: Any, output_trange: Any) -> None: ...
    def _get_level_prefix(self, level: str) -> str: ...
    def operation_start(self, operation: str, args: Optional[Any] = None) -> None: ...
    def operation_result(self, operation: str, result: Optional[Any] = None) -> None: ...
    def array_info(self, name: str, array: Any) -> None: ...
    def datacubby(self, msg: str) -> None: ...

    @property
    def show_debug(self) -> bool: ...
    @show_debug.setter
    def show_debug(self, value: bool) -> None: ...
    @property
    def show_status(self) -> bool: ...
    @show_status.setter
    def show_status(self, value: bool) -> None: ...
    @property
    def show_variable_testing(self) -> bool: ...
    @show_variable_testing.setter
    def show_variable_testing(self, value: bool) -> None: ...
    @property
    def show_variable_basic(self) -> bool: ...
    @show_variable_basic.setter
    def show_variable_basic(self, value: bool) -> None: ...
    @property
    def show_custom_debug(self) -> bool: ...
    @show_custom_debug.setter
    def show_custom_debug(self, value: bool) -> None: ...
    @property
    def show_time_tracking(self) -> bool: ...
    @show_time_tracking.setter
    def show_time_tracking(self, value: bool) -> None: ...
    @property
    def show_test(self) -> bool: ...
    @show_test.setter
    def show_test(self, value: bool) -> None: ...
    @property
    def show_error(self) -> bool: ...
    @show_error.setter
    def show_error(self, value: bool) -> None: ...
    @property
    def show_module_prefix(self) -> bool: ...
    @show_module_prefix.setter
    def show_module_prefix(self, value: bool) -> None: ...
    @property
    def show_processing(self) -> bool: ...
    @show_processing.setter
    def show_processing(self, value: bool) -> None: ...
    @property
    def show_category_prefix(self) -> bool: ...
    @show_category_prefix.setter
    def show_category_prefix(self, value: bool) -> None: ...
    @property
    def show_warnings(self) -> bool: ...
    @show_warnings.setter
    def show_warnings(self, value: bool) -> None: ...
    @property
    def pyspedas_verbose(self) -> bool: ...
    @pyspedas_verbose.setter
    def pyspedas_verbose(self, value: bool) -> None: ...

    def status(self, msg: str) -> None: ...
    def _get_caller_module(self) -> str: ...
    def test(self, msg: str) -> None: ...
    def enable_debug(self) -> None: ...
    def disable_debug(self) -> None: ...
    def enable_test(self) -> None: ...
    def disable_test(self) -> None: ...
    def enable_status(self) -> None: ...
    def disable_status(self) -> None: ...
    def enable_datacubby(self) -> None: ...
    def disable_datacubby(self) -> None: ...
    def processing(self, msg: str) -> None: ...

# --- Module-level Instance ---
print_manager: print_manager_class