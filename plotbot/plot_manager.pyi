# Stubs for plotbot.plot_manager
# -*- coding: utf-8 -*-

import numpy as np
from numpy.typing import ArrayLike, DTypeLike
import matplotlib.pyplot as plt # Used in __setattr__ validation
from datetime import datetime
from typing import Optional, Tuple, Any, Union, List, Dict, ClassVar, Sequence

# Assume these types are defined elsewhere in plotbot and importable
from .plot_config import plot_config
# from .data_classes.custom_variables import custom_variable # Only used internally in methods

# Type alias for plot_manager itself for clarity in methods
PlotManager = Any # Use Any initially, can refine if needed or use forward reference 'plot_manager'

class plot_manager(np.ndarray):

    # --- Class Attributes ---
    PLOT_ATTRIBUTES: ClassVar[List[str]]
    interp_method: ClassVar[str]

    # --- Instance Attributes (Type hints for attributes managed by plot_options or internal state) ---
    # These are accessed via properties but good to hint their existence/type
    plot_options: plot_config
    _plot_state: Dict[str, Any]
    _original_options: Optional[plot_config]
    # Attributes potentially set by properties or methods
    _colorbar_label: Optional[str]
    _source_class_names: Optional[Any] # Type depends on what's stored
    _source_subclass_names: Optional[Any] # Type depends on what's stored
    # Attributes added by arithmetic operations for custom_variable use
    operation: Optional[str]
    source_var: Optional[List['plot_manager']] # Forward reference or use Any/PlotManager
    scalar_value: Optional[Any]

    # --- Special Methods ---
    def __new__(cls, input_array: ArrayLike, plot_options: Optional[plot_config] = ...) -> 'plot_manager': ...
    def __array__(self, dtype: Optional[DTypeLike] = ...) -> 'plot_manager': ... # Returns plot_manager, not ndarray
    def __array_wrap__(self, out_arr: np.ndarray, context: Optional[Tuple[Any, ...]] = ...) -> Union[np.ndarray, 'plot_manager']: ...
    def __array_finalize__(self, obj: Optional[Any]) -> None: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __getattr__(self, name: str) -> Any: ... # Returns plot_options attr or raises AttributeError

    # --- Arithmetic Methods (Return plot_manager via custom_variable) ---
    def __add__(self, other: Union['plot_manager', float, int]) -> 'plot_manager': ...
    def __radd__(self, other: Union[float, int]) -> 'plot_manager': ... # Only scalar + self handled here
    def __sub__(self, other: Union['plot_manager', float, int]) -> 'plot_manager': ...
    def __rsub__(self, other: Union[float, int]) -> 'plot_manager': ... # Only scalar - self handled here
    def __mul__(self, other: Union['plot_manager', float, int]) -> 'plot_manager': ...
    def __rmul__(self, other: Union[float, int]) -> 'plot_manager': ... # Only scalar * self handled here
    def __truediv__(self, other: Union['plot_manager', float, int]) -> 'plot_manager': ...
    def __rtruediv__(self, other: Union[float, int]) -> 'plot_manager': ... # Only scalar / self handled here
    def __pow__(self, other: Union[float, int]) -> 'plot_manager': ... # Only self ** scalar handled here
    def __rpow__(self, other: Union[float, int]) -> 'plot_manager': ... # Only scalar ** self handled here
    def __neg__(self) -> 'plot_manager': ...
    def __abs__(self) -> 'plot_manager': ...
    def __floordiv__(self, other: Union['plot_manager', float, int]) -> 'plot_manager': ...
    def __rfloordiv__(self, other: Union[float, int]) -> 'plot_manager': ... # Only scalar // self handled here

    # --- Properties (Accessing plot_options attributes) ---
    @property
    def data(self) -> np.ndarray: ...
    @property
    def all_data(self) -> np.ndarray: ...
    @property
    def data_type(self) -> Optional[str]: ...
    @data_type.setter
    def data_type(self, value: Optional[str]) -> None: ...
    @property
    def class_name(self) -> Optional[str]: ...
    @class_name.setter
    def class_name(self, value: Optional[str]) -> None: ...
    @property
    def subclass_name(self) -> Optional[str]: ...
    @subclass_name.setter
    def subclass_name(self, value: Optional[str]) -> None: ...
    @property
    def plot_type(self) -> Optional[str]: ...
    @plot_type.setter
    def plot_type(self, value: Optional[str]) -> None: ...
    @property
    def var_name(self) -> Optional[Union[str, List[str]]]: ...
    @var_name.setter
    def var_name(self, value: Optional[Union[str, List[str]]]) -> None: ...
    @property
    def datetime_array(self) -> Optional[np.ndarray]: ...
    @datetime_array.setter
    def datetime_array(self, value: Optional[np.ndarray]) -> None: ...
    @property
    def time(self) -> Optional[np.ndarray]: ...
    @time.setter
    def time(self, value: Optional[np.ndarray]) -> None: ...
    @property
    def y_label(self) -> Optional[str]: ...
    @y_label.setter
    def y_label(self, value: Optional[str]) -> None: ...
    @property
    def legend_label(self) -> Optional[Union[str, List[str]]]: ...
    @legend_label.setter
    def legend_label(self, value: Optional[Union[str, List[str]]]) -> None: ...
    @property
    def color(self) -> Optional[Union[str, List[str]]]: ...
    @color.setter
    def color(self, value: Optional[Union[str, List[str]]]) -> None: ...
    @property
    def y_scale(self) -> Optional[str]: ...
    @y_scale.setter
    def y_scale(self, value: Optional[str]) -> None: ...
    @property
    def y_limit(self) -> Optional[Tuple[Optional[float], Optional[float]]]: ...
    @y_limit.setter
    def y_limit(self, value: Optional[Tuple[Optional[float], Optional[float]]]) -> None: ...
    @property
    def line_width(self) -> Optional[Union[float, int, List[Union[float, int]]]]: ...
    @line_width.setter
    def line_width(self, value: Optional[Union[float, int, List[Union[float, int]]]]) -> None: ...
    @property
    def line_style(self) -> Optional[Union[str, List[str]]]: ...
    @line_style.setter
    def line_style(self, value: Optional[Union[str, List[str]]]) -> None: ...
    @property
    def colormap(self) -> Optional[str]: ...
    @colormap.setter
    def colormap(self, value: Optional[str]) -> None: ...
    @property
    def colorbar_scale(self) -> Optional[str]: ...
    @colorbar_scale.setter
    def colorbar_scale(self, value: Optional[str]) -> None: ...
    @property
    def colorbar_limits(self) -> Optional[Tuple[Optional[float], Optional[float]]]: ...
    @colorbar_limits.setter
    def colorbar_limits(self, value: Optional[Tuple[Optional[float], Optional[float]]]) -> None: ...
    @property
    def additional_data(self) -> Optional[np.ndarray]: ...
    @additional_data.setter
    def additional_data(self, value: Optional[np.ndarray]) -> None: ...
    @property
    def colorbar_label(self) -> Optional[str]: ...
    @colorbar_label.setter
    def colorbar_label(self, value: Optional[str]) -> None: ...
    @property
    def source_class_names(self) -> Optional[Any]: ... # Type depends on what's stored
    @source_class_names.setter
    def source_class_names(self, value: Optional[Any]) -> None: ...
    @property
    def source_subclass_names(self) -> Optional[Any]: ... # Type depends on what's stored
    @source_subclass_names.setter
    def source_subclass_names(self, value: Optional[Any]) -> None: ...
    # Properties for marker, marker_size, alpha, marker_style (assuming they access plot_options)
    @property
    def marker(self) -> Optional[str]: ...
    @marker.setter
    def marker(self, value: Optional[str]) -> None: ...
    @property
    def marker_size(self) -> Optional[Union[float, int]]: ...
    @marker_size.setter
    def marker_size(self, value: Optional[Union[float, int]]) -> None: ...
    @property
    def alpha(self) -> Optional[Union[float, int]]: ...
    @alpha.setter
    def alpha(self, value: Optional[Union[float, int]]) -> None: ...
    @property
    def marker_style(self) -> Optional[Any]: ... # Type depends on what plot_options stores
    @marker_style.setter
    def marker_style(self, value: Optional[Any]) -> None: ...

    # --- Static Methods ---
    @staticmethod
    def interpolate_to_times(source_times: ArrayLike, source_values: ArrayLike, target_times: ArrayLike, method: str = ...) -> np.ndarray: ...

    # --- Instance Methods ---
    def align_variables(self, other: 'plot_manager') -> Tuple[np.ndarray, np.ndarray, Optional[np.ndarray]]: ...
    # Note: _set_plot_option, _create_derived, _check_default_value are internal
    # def _set_plot_option(self, attribute: str, value: Any) -> None: ...
    # def _create_derived(self, operation: str, source_vars: List['plot_manager'], input_name: Optional[str] = ..., scalar_value: Optional[Any] = ...) -> 'plot_manager': ...
    # def _check_default_value(self, name: str) -> Optional[Any]: ...

# Reminder: If you add functions or classes directly to the .py file, add their signatures here too, ending with '...'.
