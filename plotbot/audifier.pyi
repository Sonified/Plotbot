# Stubs for plotbot.audifier
# -*- coding: utf-8 -*-

import os
import ipywidgets as widgets # Used in functions, type hint needed
from IPython.display import display # Used in functions, type hint needed
from datetime import datetime, timedelta
import numpy as np
import pandas as pd
from typing import Optional, Tuple, Any, Union, List, Dict

# Assume these types are defined elsewhere in plotbot and importable
# Note: plot_manager is used implicitly in audify via components argument
# from .plot_manager import plot_manager # Not directly imported, but relevant type

# Type alias for components argument in audify
ComponentType = Any # Could be refined if plot_manager is explicitly typed

# --- Module-level Functions ---
def open_directory(directory: str) -> None: ...
def show_directory_button(directory: str) -> None: ...
def show_file_buttons(file_paths: Dict[str, str]) -> None: ...
def set_save_directory(last_dir_file: str) -> Optional[str]: ...

# --- Audifier Class ---
class Audifier:
    # --- Public Attributes (with type hints) ---
    last_dir_file: str
    default_save_dir_name: str
    save_dir: Optional[str]
    sample_rate: int
    markers_per_hour: Union[int, float]
    markers_only: bool
    quantize_markers: Union[bool, int, float] # Can be bool or number of minutes
    # Private attributes managed by properties
    _channels: int
    _fade_samples: int

    # --- Methods ---
    def __init__(self) -> None: ...
    def get_save_directory(self) -> Optional[str]: ...
    def clip_data_to_range(self, components: List[ComponentType], trange: List[str]) -> np.ndarray: ...
    def set_save_dir(self, directory: str) -> None: ...
    def select_save_dir(self, force_new: bool = ...) -> None: ...
    def set_markers_per_hour(self, markers: Union[int, float]) -> None: ...
    def apply_fade(self, audio_data: np.ndarray) -> np.ndarray: ...
    def generate_markers(self, times: Union[np.ndarray, pd.DatetimeIndex], trange: List[str], output_dir: str) -> Optional[str]: ...
    def format_time_for_filename(self, time_str: str) -> str: ...
    def audify(self, trange: List[str], *components: ComponentType, filename: Optional[str] = ..., channels: Optional[int] = ..., markers_per_hour: Optional[Union[int, float]] = ..., sample_rate: Optional[int] = ..., norm_percentile: Optional[float] = ...) -> Optional[Dict[str, Optional[str]]]: ... # Returns dict of filenames or None

    # --- Properties ---
    @property
    def channels(self) -> int: ...
    @channels.setter
    def channels(self, value: int) -> None: ...
    @property
    def fade_samples(self) -> int: ...
    @fade_samples.setter
    def fade_samples(self, value: int) -> None: ...

    # --- Internal Helper Methods (Omitted from stub) ---
    # def _parse_and_format_trange(self, trange: List[str]) -> Optional[Dict[str, Any]]: ...
    # def _process_and_save_mono_component(self, component: ComponentType, trange: List[str], filename: Optional[str], markers_per_hour: Optional[Union[int, float]], sample_rate: int, norm_percentile: Optional[float]) -> None: ...
    # def _process_component(self, component: ComponentType, trange: List[str], sample_rate: int, norm_percentile: Optional[float]) -> Optional[np.ndarray]: ...
    # def _create_filename(self, base_filename: Optional[str], component_suffix: str) -> str: ...
    # @staticmethod def normalize_to_int16(data: np.ndarray) -> np.ndarray: ...


# --- Module-level Instances ---
audifier: Audifier

# Reminder: If you add functions or classes directly to the .py file, add their signatures here too, ending with '...'.
