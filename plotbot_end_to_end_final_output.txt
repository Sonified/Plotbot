initialized server_access
initialized global_tracker
initialized ploptions
initialized data_cubby
initialized plot_manager
[35m[ZARR] Using plot_options: data_type=mag_RTN_4sa, class=mag_rtn_4sa, subclass=all[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN_4sa, class=mag_rtn_4sa, subclass=br[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN_4sa, class=mag_rtn_4sa, subclass=bt[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN_4sa, class=mag_rtn_4sa, subclass=bn[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN_4sa, class=mag_rtn_4sa, subclass=bmag[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN_4sa, class=mag_rtn_4sa, subclass=pmag[0m
initialized mag_rtn_4sa class
[35m[ZARR] Using plot_options: data_type=mag_RTN, class=mag_rtn, subclass=all[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN, class=mag_rtn, subclass=br[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN, class=mag_rtn, subclass=bt[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN, class=mag_rtn, subclass=bn[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN, class=mag_rtn, subclass=bmag[0m
[35m[ZARR] Using plot_options: data_type=mag_RTN, class=mag_rtn, subclass=pmag[0m
initialized mag_rtn class
[35m[ZARR] Using plot_options: data_type=mag_SC_4sa, class=mag_sc_4sa, subclass=all[0m
[35m[ZARR] Using plot_options: data_type=mag_SC_4sa, class=mag_sc_4sa, subclass=bx[0m
[35m[ZARR] Using plot_options: data_type=mag_SC_4sa, class=mag_sc_4sa, subclass=by[0m
[35m[ZARR] Using plot_options: data_type=mag_SC_4sa, class=mag_sc_4sa, subclass=bz[0m
[35m[ZARR] Using plot_options: data_type=mag_SC_4sa, class=mag_sc_4sa, subclass=bmag[0m
[35m[ZARR] Using plot_options: data_type=mag_SC_4sa, class=mag_sc_4sa, subclass=pmag[0m
initialized mag_sc_4sa class
[35m[ZARR] Using plot_options: data_type=mag_SC, class=mag_sc, subclass=all[0m
[35m[ZARR] Using plot_options: data_type=mag_SC, class=mag_sc, subclass=bx[0m
[35m[ZARR] Using plot_options: data_type=mag_SC, class=mag_sc, subclass=by[0m
[35m[ZARR] Using plot_options: data_type=mag_SC, class=mag_sc, subclass=bz[0m
[35m[ZARR] Using plot_options: data_type=mag_SC, class=mag_sc, subclass=bmag[0m
[35m[ZARR] Using plot_options: data_type=mag_SC, class=mag_sc, subclass=pmag[0m
initialized mag_sc class
[35m[ZARR] Using plot_options: data_type=spe_sf0_pad, class=epad, subclass=strahl[0m
[35m[ZARR] Using plot_options: data_type=spe_sf0_pad, class=epad, subclass=centroids[0m
initialized epad class
[35m[ZARR] Using plot_options: data_type=spe_af0_pad, class=epad_hr, subclass=strahl[0m
[35m[ZARR] Using plot_options: data_type=spe_af0_pad, class=epad_hr, subclass=centroids[0m
initialized epad_hr class
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=t_par[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=t_perp[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=anisotropy[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=v_alfven[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=v_sw[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=m_alfven[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=beta_ppar[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=beta_pperp[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=pressure_ppar[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=pressure_pperp[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=pressure[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=density[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=temperature[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=bmag[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=vr[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=vt[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=vn[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=energy_flux[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=theta_flux[0m
[35m[ZARR] Using plot_options: data_type=spi_sf00_l3_mom, class=proton, subclass=phi_flux[0m
initialized proton class
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=t_par[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=t_perp[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=anisotropy[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=v_alfven[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=v_sw[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=m_alfven[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=beta_ppar[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=beta_pperp[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=pressure_ppar[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=pressure_pperp[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=pressure[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=density[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=temperature[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=bmag[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=vr[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=vt[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=vn[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=energy_flux[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=theta_flux[0m
[35m[ZARR] Using plot_options: data_type=spi_af00_L3_mom, class=proton_hr, subclass=phi_flux[0m
initialized proton_hr class
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=qz_p[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vsw_mach_pfits[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=beta_ppar_pfits[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=beta_pperp_pfits[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=ham_param[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=np1[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=np2[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=n_tot[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=np2_np1_ratio[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vp1_x[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vp1_y[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vp1_z[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vp1_mag[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vcm_x[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vcm_y[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vcm_z[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vcm_mag[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vdrift[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vdrift_abs[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=vdrift_va_pfits[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Trat1[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Trat2[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Trat_tot[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Tpar1[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Tpar2[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Tpar_tot[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Tperp1[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Tperp2[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Tperp_tot[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=Temp_tot[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=abs_qz_p[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=chi_p[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=chi_p_norm[0m
[35m[ZARR] Using plot_options: data_type=proton_fits, class=proton_fits, subclass=valfven_pfits[0m
initialized proton_fits class
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=hamstring[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=hamogram_30s[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=hamogram_og_30s[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=hamogram_2m[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=hamogram_og_2m[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=hamogram_20m[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=hamogram_90m[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=hamogram_4h[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=hamogram_og_4h[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=trat_ham[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=trat_ham_og[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=ham_core_drift[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=ham_core_drift_va[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=Nham_div_Ncore[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=Nham_div_Ncore_og[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=Nham_div_Ntot[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=Nham_div_Ntot_og[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=Tperp_ham_div_core[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=Tperp_ham_div_core_og[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=Tperprat_driftva_hc[0m
[35m[ZARR] Using plot_options: data_type=ham, class=ham, subclass=Tperprat_driftva_hc_og[0m
initialized ham_class
🔉 initialized audifier

Importing libraries, this may take a moment. Hold tight... 

✅ Imported standard libraries and utilities.
✅ Imported numpy, pandas, and scipy libraries.
✅ Imported matplotlib libraries.
✅ Imported cdflib, BeautifulSoup, requests, dateutil, and datetime libraries.
[35m[ZARR] [ZarrStorage.__init__] Initializing with base_dir=./data_cubby[0m
[35m[ZARR] [ZarrStorage.__init__] Directory created: ./data_cubby[0m

🤖 Plotbot Initialized
✨ Showdahodo initialized
Positional Data Helper Initialized
📈📉 Multiplot Initialized
[94m   Version: 2025_05_03_v1.96[0m
[94m   Commit: test: v1.96: Zarr integration tests 1-5 passing, end-to-end test import/circular issues remain, finally block fixed (2025_05_03_v1.96)[0m

[94m🤖 Plotbot Initialized[0m
Test-only mode enabled
============================= test session starts ==============================
platform darwin -- Python 3.12.4, pytest-7.4.4, pluggy-1.5.0 -- /opt/anaconda3/envs/plotbot_env/bin/python3.12
cachedir: .pytest_cache
rootdir: /Users/robertalexander/GitHub/Plotbot
configfile: pytest.ini
collecting ... collected 1 item

tests/test_zarr_basic.py::test_plotbot_end_to_end_mag_and_epad [TEST] Calling pb.plotbot with mag_rtn_4sa.br and epad.strahl...
[35m[ZARR] TRACE: get_data function entry point[0m
[35m[ZARR] INPUT: trange=['2022/04/14 00:00:00.000', '2022/04/14 06:00:00.000'], variables=(plot_manager(None, dtype=object), plot_manager(None, dtype=object))[0m
Variable type: <class 'plotbot.plot_manager.plot_manager'>, name: None
[35m[ZARR] [get_data] required_data_types: {'spe_sf0_pad', 'mag_RTN_4sa'}[0m
[35m[ZARR] 
Processing Data Type: spe_sf0_pad...[0m
[35m[ZARR] [get_data] spe_sf0_pad: needs_import=True, needs_refresh=True[0m
[35m[ZARR] [get_data] Import/Refresh logic triggered for spe_sf0_pad[0m
[35m[ZARR] [load_data] Called for data_type=spe_sf0_pad, trange=['2022/04/14 00:00:00.000', '2022/04/14 06:00:00.000'][0m
[35m[ZARR] [load_data] file_time_format=daily[0m
[35m[ZARR] [_find_zarr_paths] Called for data_type=spe_sf0_pad, start_time=2022-04-14 00:00:00+00:00, end_time=2022-04-14 06:00:00+00:00, file_time_format=daily[0m
[35m[ZARR] [_get_zarr_path] Called for data_type=spe_sf0_pad, timestamp=2022-04-14 00:00:00+00:00, file_time_format=daily[0m
[35m[ZARR] [_get_zarr_path] Returning path[0m
[35m[ZARR] [_find_zarr_paths] Returning paths: ['./data_cubby/spe_sf0_pad/2022/04/14.zarr'][0m
[35m[ZARR] [load_data] zarr_paths: ['./data_cubby/spe_sf0_pad/2022/04/14.zarr'][0m
[35m[ZARR] [load_data] Loading 1 Zarr stores[0m
[35m[ZARR] [load_data] Looping through zarr_paths[0m
[LOAD] Loaded dataset variables: ['centroids', 'strahl']
[LOAD] Loaded time: ['2022-04-14T00:03:44.139775488' '2022-04-14T00:18:38.925658496'
 '2022-04-14T00:33:33.711861888' '2022-04-14T00:48:28.498364928'
 '2022-04-14T01:03:23.285048320'] ... total: 22
[DEBUG][ZARR][LOAD] Loaded var 'centroids': type=<class 'numpy.ndarray'>, shape=(22,)
[DEBUG][ZARR][LOAD] Loaded var 'strahl': type=<class 'numpy.ndarray'>, shape=(22, 12)
[LOAD] LoadedData.raw_data keys: ['centroids', 'strahl', 'EFLUX_VS_PA_E', 'PITCHANGLE']
[LOAD] LoadedData.datetime_array: ['2022-04-14T00:03:44.139775488' '2022-04-14T00:18:38.925658496'
 '2022-04-14T00:33:33.711861888' '2022-04-14T00:48:28.498364928'
 '2022-04-14T01:03:23.285048320'] ... total: 22
[35m[ZARR] [get_data] Calling update on epad with data_obj for spe_sf0_pad[0m
[DEBUG][EPAD] eflux type: <class 'numpy.ndarray'>, shape: (22, 12)
FAILED

=================================== FAILURES ===================================
_____________________ test_plotbot_end_to_end_mag_and_epad _____________________

    def test_plotbot_end_to_end_mag_and_epad():
        """Test full plotbot workflow: import plotbot as pb, call pb.plotbot with mag_rtn_4sa.br and epad.strahl."""
        import plotbot as pb
        test_range = ['2022/04/14 00:00:00.000', '2022/04/14 06:00:00.000']
        print("[TEST] Calling pb.plotbot with mag_rtn_4sa.br and epad.strahl...")
>       pb.plotbot(test_range, pb.mag_rtn_4sa.br, 1, pb.epad.strahl, 2)

tests/test_zarr_basic.py:263: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
plotbot/plotbot_main.py:236: in plotbot
    get_data(trange, *regular_vars)
plotbot/get_data.py:327: in get_data
    class_instance.update(zarr_data)
plotbot/data_classes/psp_electron_classes.py:65: in update
    self.calculate_variables(imported_data)                                # Update raw data arrays
plotbot/data_classes/psp_electron_classes.py:160: in calculate_variables
    centroids = np.ma.average(self.pitch_angle,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = masked_array(data=[ 92.22112 ,  91.40837 ,  92.07255 ,  90.73916 ,
                   113.11425 ,  91.70334 ,  90.7098...                   90.664116,  91.18253 ],
             mask=False,
       fill_value=1e+20,
            dtype=float32)
axis = 1
weights = array([[0.79592615, 0.82263666, 0.8357059 , 0.8269461 , 0.8309161 ,
        0.8273499 , 0.83473086, 0.8337294 , 0.8329... ,
        0.8247045 , 0.82019746, 0.81976277, 0.83028215, 0.84523505,
        0.87138504, 0.8790851 ]], dtype=float32)
returned = False

    def average(a, axis=None, weights=None, returned=False, *,
                keepdims=np._NoValue):
        """
        Return the weighted average of array over the given axis.
    
        Parameters
        ----------
        a : array_like
            Data to be averaged.
            Masked entries are not taken into account in the computation.
        axis : int, optional
            Axis along which to average `a`. If None, averaging is done over
            the flattened array.
        weights : array_like, optional
            The importance that each element has in the computation of the average.
            The weights array can either be 1-D (in which case its length must be
            the size of `a` along the given axis) or of the same shape as `a`.
            If ``weights=None``, then all data in `a` are assumed to have a
            weight equal to one.  The 1-D calculation is::
    
                avg = sum(a * weights) / sum(weights)
    
            The only constraint on `weights` is that `sum(weights)` must not be 0.
        returned : bool, optional
            Flag indicating whether a tuple ``(result, sum of weights)``
            should be returned as output (True), or just the result (False).
            Default is False.
        keepdims : bool, optional
            If this is set to True, the axes which are reduced are left
            in the result as dimensions with size one. With this option,
            the result will broadcast correctly against the original `a`.
            *Note:* `keepdims` will not work with instances of `numpy.matrix`
            or other classes whose methods do not support `keepdims`.
    
            .. versionadded:: 1.23.0
    
        Returns
        -------
        average, [sum_of_weights] : (tuple of) scalar or MaskedArray
            The average along the specified axis. When returned is `True`,
            return a tuple with the average as the first element and the sum
            of the weights as the second element. The return type is `np.float64`
            if `a` is of integer type and floats smaller than `float64`, or the
            input data-type, otherwise. If returned, `sum_of_weights` is always
            `float64`.
    
        Examples
        --------
        >>> a = np.ma.array([1., 2., 3., 4.], mask=[False, False, True, True])
        >>> np.ma.average(a, weights=[3, 1, 0, 0])
        1.25
    
        >>> x = np.ma.arange(6.).reshape(3, 2)
        >>> x
        masked_array(
          data=[[0., 1.],
                [2., 3.],
                [4., 5.]],
          mask=False,
          fill_value=1e+20)
        >>> avg, sumweights = np.ma.average(x, axis=0, weights=[1, 2, 3],
        ...                                 returned=True)
        >>> avg
        masked_array(data=[2.6666666666666665, 3.6666666666666665],
                     mask=[False, False],
               fill_value=1e+20)
    
        With ``keepdims=True``, the following result has shape (3, 1).
    
        >>> np.ma.average(x, axis=1, keepdims=True)
        masked_array(
          data=[[0.5],
                [2.5],
                [4.5]],
          mask=False,
          fill_value=1e+20)
        """
        a = asarray(a)
        m = getmask(a)
    
        # inspired by 'average' in numpy/lib/function_base.py
    
        if keepdims is np._NoValue:
            # Don't pass on the keepdims argument if one wasn't given.
            keepdims_kw = {}
        else:
            keepdims_kw = {'keepdims': keepdims}
    
        if weights is None:
            avg = a.mean(axis, **keepdims_kw)
            scl = avg.dtype.type(a.count(axis))
        else:
            wgt = asarray(weights)
    
            if issubclass(a.dtype.type, (np.integer, np.bool_)):
                result_dtype = np.result_type(a.dtype, wgt.dtype, 'f8')
            else:
                result_dtype = np.result_type(a.dtype, wgt.dtype)
    
            # Sanity checks
            if a.shape != wgt.shape:
                if axis is None:
                    raise TypeError(
                        "Axis must be specified when shapes of a and weights "
                        "differ.")
                if wgt.ndim != 1:
>                   raise TypeError(
                        "1D weights expected when shapes of a and weights differ.")
E                   TypeError: 1D weights expected when shapes of a and weights differ.

/opt/anaconda3/envs/plotbot_env/lib/python3.12/site-packages/numpy/ma/extras.py:633: TypeError
=============================== warnings summary ===============================
tests/test_zarr_basic.py::test_plotbot_end_to_end_mag_and_epad
  /Users/robertalexander/GitHub/Plotbot/plotbot/data_classes/psp_electron_classes.py:149: RuntimeWarning: invalid value encountered in log10
    log_strahl = np.log10(strahl)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_zarr_basic.py::test_plotbot_end_to_end_mag_and_epad - TypeE...
========================= 1 failed, 1 warning in 0.33s =========================
